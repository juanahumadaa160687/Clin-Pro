# Generated by Django 5.2.6 on 2025-09-30 12:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('administracion', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Convenio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(default='Sin Convenio', max_length=100, verbose_name='Nombre del Convenio')),
                ('descuento', models.IntegerField(default=0, verbose_name='Descuento')),
            ],
            options={
                'verbose_name': 'Convenio',
                'verbose_name_plural': 'Convenios',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='email')),
                ('password1', models.CharField(blank=True, max_length=128, null=True, verbose_name='password')),
                ('rut', models.CharField(blank=True, max_length=128, null=True, verbose_name='RUT')),
                ('nombre', models.CharField(blank=True, max_length=128, null=True, verbose_name='nombre')),
                ('telefono', models.CharField(blank=True, max_length=128, null=True, verbose_name='telefono')),
                ('rol', models.CharField(blank=True, max_length=128, null=True, verbose_name='rol')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genero', models.CharField(blank=True, max_length=128, null=True, verbose_name='Genero')),
                ('direccion', models.CharField(blank=True, max_length=100, null=True, verbose_name='Direccion')),
                ('fecha_nacimiento', models.DateField(blank=True, null=True, verbose_name='Fecha de Nacimiento')),
                ('telefono_emergencia', models.CharField(blank=True, max_length=15, null=True, verbose_name='Teléfono de Emergencia')),
                ('prevision', models.CharField(blank=True, max_length=100, null=True, verbose_name='Previsión')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Paciente',
                'verbose_name_plural': 'Pacientes',
            },
        ),
        migrations.CreateModel(
            name='Pago',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orden_compra', models.CharField(blank=True, max_length=50, null=True, verbose_name='Número de Compra')),
                ('fecha', models.DateField(verbose_name='Fecha del Pago')),
                ('monto', models.DecimalField(decimal_places=0, max_digits=10, verbose_name='Monto del Pago')),
                ('metodo_pago', models.CharField(blank=True, max_length=50, null=True, verbose_name='Método de Pago')),
                ('is_pagado', models.BooleanField(default=False, verbose_name='¿Está Pagado?')),
                ('convenio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinpro.convenio', verbose_name='Convenio')),
            ],
            options={
                'verbose_name': 'Pago',
                'verbose_name_plural': 'Pagos',
            },
        ),
        migrations.CreateModel(
            name='ReservaHora',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_reserva', models.DateField(verbose_name='Fecha de la Reserva')),
                ('hora_reserva', models.TimeField(verbose_name='Hora de Inicio')),
                ('is_confirmada', models.BooleanField(default=False, verbose_name='¿Está Confirmada?')),
                ('is_asistencia', models.BooleanField(default=False, verbose_name='¿Asistió?')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinpro.paciente', verbose_name='Paciente')),
                ('pago', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinpro.pago', verbose_name='Pago')),
                ('profesional', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='administracion.personalsalud', verbose_name='Profesional')),
            ],
            options={
                'verbose_name': 'Reserva de Hora',
                'verbose_name_plural': 'Reservas de Horas',
            },
        ),
    ]
